---
name: Package Manager Backstop

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:

concurrency:
  group: backstop-pkg-manager
  cancel-in-progress: true

jobs:
  test-installations:
    if: |
      github.repository == 'sourcegraph/amp-cli' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS testing
          - os: macos-latest
            package_manager: homebrew
          - os: macos-latest
            package_manager: nix
          # Ubuntu testing
          - os: ubuntu-latest
            package_manager: homebrew
          - os: ubuntu-latest
            package_manager: nix
          - os: ubuntu-latest
            package_manager: apt
          - os: ubuntu-latest
            package_manager: rpm
          - os: ubuntu-latest
            package_manager: docker
            arch: amd64
          - os: ubuntu-latest
            package_manager: docker
            arch: arm64
          # Windows testing
          - os: windows-latest
            package_manager: chocolatey

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test Homebrew Installation (macOS/Linux)
        id: test-homebrew
        if: matrix.package_manager == 'homebrew'
        continue-on-error: true
        run: |
          # Install Homebrew if not present (mainly for Linux)
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bashrc
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" || true
          fi

          # Tap the repository
          brew tap sourcegraph/amp-cli

          # Install amp from the specific tap
          brew install sourcegraph/amp-cli/amp

          # Test that amp is working (handle CI terminal issues)
          amp --help || echo "amp binary installed but may have terminal compatibility issues in CI"

          # Clean up
          brew uninstall sourcegraph/amp-cli/amp
          brew untap sourcegraph/amp-cli

      - name: Test Chocolatey Installation (Windows)
        id: test-chocolatey
        if: matrix.package_manager == 'chocolatey'
        continue-on-error: true
        shell: powershell
        run: |
          # Install Chocolatey if not present
          if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = `
              [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }

          # Check if amp package exists in Chocolatey community repository
          $searchResult = choco search amp --exact --limit-output
          if ($searchResult -match "^amp\|") {
            Write-Host "amp package found in Chocolatey community repository"
            choco install amp -y
            try { amp --help } catch {
              Write-Host "amp binary installed but may have terminal compatibility issues in CI"
            }
            choco uninstall amp -y
          } else {
            Write-Host "amp package not yet published to Chocolatey community repository - skipping test"
            Write-Host "This is expected for new packages that haven't been published yet"
          }

      - name: Test Docker Container (Linux)
        id: test-docker
        if: matrix.package_manager == 'docker'
        continue-on-error: true
        run: |
          # Set up Docker Buildx for multi-platform support
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use --name multiarch || true
          docker buildx inspect --bootstrap

          # Test pulling and running the Docker container for the specified architecture
          echo "Testing Docker container for ${{ matrix.arch }} architecture"

          # Pull the latest container (this tests that the container exists and is accessible)
          if docker pull --platform linux/${{ matrix.arch }} ghcr.io/sourcegraph/amp-cli:latest; then
            echo "Successfully pulled amp Docker container for ${{ matrix.arch }}"

            # Test running the container with --help
            echo "Testing container functionality..."
            if docker run --rm --platform linux/${{ matrix.arch }} ghcr.io/sourcegraph/amp-cli:latest --help; then
              echo "amp Docker container working correctly on ${{ matrix.arch }}"
            else
              echo "amp Docker container pulled but may have runtime issues on ${{ matrix.arch }}"
            fi
          else
            echo "Failed to pull amp Docker container for ${{ matrix.arch }} - container may not be published yet"
            echo "This is expected for new releases that haven't been built yet"
          fi

      - name: Test Nix Installation (macOS/Linux)
        id: test-nix
        if: matrix.package_manager == 'nix'
        continue-on-error: true
        run: |
          # Install Nix if not present
          if ! command -v nix &> /dev/null; then
            echo "Installing Nix..."
            curl -L https://nixos.org/nix/install | sh -s -- --daemon
            . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh || true
          fi

          # Enable flakes and nix-command features
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          # Install amp via Nix flake
          echo "Installing amp via Nix flake..."
          NIXPKGS_ALLOW_UNFREE=1 nix --extra-experimental-features nix-command --extra-experimental-features flakes profile install github:sourcegraph/amp-cli

          # Test that amp is working
          amp --help || echo "amp binary installed but may have terminal compatibility issues in CI"

          # Clean up
          nix profile remove github:sourcegraph/amp-cli || true

      - name: Test APT Repository Installation (Ubuntu)
        id: test-apt
        if: matrix.package_manager == 'apt'
        continue-on-error: true
        run: |
          # Test APT repository installation
          echo "Testing APT repository installation..."
          
          # Debug: Check what's at the GPG key URL
          echo "=== DEBUG: Checking GPG key URL ==="
          curl -v https://packages.ampcode.com/gpg/amp-cli.asc || true
          echo "=== END DEBUG ==="
          
          # Download and inspect GPG key
          echo "=== DEBUG: Downloading and inspecting GPG key ==="
          curl -fsSL https://packages.ampcode.com/gpg/amp-cli.asc > /tmp/amp-cli.asc
          echo "Downloaded key content:"
          cat /tmp/amp-cli.asc
          echo "Key file size: $(wc -c < /tmp/amp-cli.asc) bytes"
          echo "Key file type: $(file /tmp/amp-cli.asc)"
          
          # Try to validate the GPG key before importing
          if file /tmp/amp-cli.asc | grep -q "PGP public key"; then
            echo "✅ Valid PGP key found"
          else
            echo "❌ Invalid PGP key - this will cause installation to fail"
            echo "Key contents:"
            hexdump -C /tmp/amp-cli.asc | head -10
          fi
          echo "=== END DEBUG ==="
          
          # Add GPG key (simulate what our install script does)
          echo "=== Importing GPG key ==="
          sudo gpg --dearmor -o /usr/share/keyrings/amp-cli.gpg < /tmp/amp-cli.asc
          
          # Verify the keyring was created correctly
          echo "=== DEBUG: Verifying keyring ==="
          if [ -f /usr/share/keyrings/amp-cli.gpg ]; then
            echo "✅ Keyring file created"
            ls -la /usr/share/keyrings/amp-cli.gpg
          else
            echo "❌ Keyring file not created"
          fi
          echo "=== END DEBUG ==="
          
          # Add repository
          echo "=== Adding APT repository ==="
          echo "deb [signed-by=/usr/share/keyrings/amp-cli.gpg] https://packages.ampcode.com/debian stable main" | sudo tee /etc/apt/sources.list.d/amp-cli.list
          
          # Debug: Check repository accessibility
          echo "=== DEBUG: Checking repository accessibility ==="
          curl -v https://packages.ampcode.com/debian/dists/stable/Release || true
          echo "=== END DEBUG ==="
          
          # Update package index
          echo "=== Updating package index ==="
          sudo apt-get update -v
          
          # Debug: Check if amp package is available
          echo "=== DEBUG: Checking package availability ==="
          apt-cache policy amp || true
          apt-cache search amp | grep -i "^amp" || true
          echo "=== END DEBUG ==="
          
          # Install amp
          echo "=== Installing amp package ==="
          sudo apt-get install -y amp
          
          # Test that amp is working
          echo "=== Testing amp installation ==="
          which amp || echo "amp not in PATH"
          amp --help || echo "amp binary installed but may have terminal compatibility issues in CI"
          
          # Clean up
          echo "=== Cleaning up ==="
          sudo apt-get remove -y amp
          sudo rm -f /etc/apt/sources.list.d/amp-cli.list /usr/share/keyrings/amp-cli.gpg
          sudo apt-get update

      - name: Test RPM Repository Installation (Fedora Container)
        id: test-rpm
        if: matrix.package_manager == 'rpm'
        continue-on-error: true
        run: |
          # Test RPM repository installation using Fedora container
          echo "Testing RPM repository installation in Fedora container..."
          
          docker run --rm fedora:latest bash -c "
            # Install required tools
            echo '=== Installing required tools ==='
            dnf install -y curl rpm
            
            # Debug: Check what's at the GPG key URL
            echo '=== DEBUG: Checking GPG key URL ==='
            curl -v https://packages.ampcode.com/gpg/amp-cli.asc || true
            echo '=== END DEBUG ==='
            
            # Download and inspect GPG key
            echo '=== DEBUG: Downloading and inspecting GPG key ==='
            curl -fsSL https://packages.ampcode.com/gpg/amp-cli.asc > /tmp/amp-cli.asc
            echo 'Downloaded key content:'
            cat /tmp/amp-cli.asc
            echo 'Key file size:' \$(wc -c < /tmp/amp-cli.asc) 'bytes'
            echo 'Key file type:' \$(file /tmp/amp-cli.asc)
            
            # Try to validate the GPG key before importing
            if file /tmp/amp-cli.asc | grep -q 'PGP public key'; then
              echo '✅ Valid PGP key found'
            else
              echo '❌ Invalid PGP key - this will cause installation to fail'
              echo 'Key contents:'
              hexdump -C /tmp/amp-cli.asc | head -10
            fi
            echo '=== END DEBUG ==='
            
            # Add GPG key
            echo '=== Importing GPG key ==='
            rpm --import /tmp/amp-cli.asc
            echo 'GPG import exit code:' \$?
            
            # List imported GPG keys
            echo '=== DEBUG: Listing imported GPG keys ==='
            rpm -q gpg-pubkey --qf '%{NAME}-%{VERSION}-%{RELEASE} %{SUMMARY}\n' || true
            echo '=== END DEBUG ==='
            
            # Add repository
            echo '=== Adding RPM repository ==='
            cat > /etc/yum.repos.d/amp-cli.repo << EOF
          [amp-cli]
          name=Amp CLI Repository
          baseurl=https://packages.ampcode.com/rpm
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.ampcode.com/gpg/amp-cli.asc
          EOF
            
            # Debug: Check repository accessibility
            echo '=== DEBUG: Checking repository accessibility ==='
            curl -v https://packages.ampcode.com/rpm/repodata/repomd.xml || true
            echo '=== END DEBUG ==='
            
            # Update repository metadata
            echo '=== Updating repository metadata ==='
            dnf makecache || true
            
            # Debug: Check if amp package is available
            echo '=== DEBUG: Checking package availability ==='
            dnf search amp || true
            dnf info amp || true
            echo '=== END DEBUG ==='
            
            # Install amp
            echo '=== Installing amp package ==='
            dnf install -y amp
            echo 'Installation exit code:' \$?
            
            # Test that amp is working
            echo '=== Testing amp installation ==='
            which amp || echo 'amp not in PATH'
            amp --help || echo 'amp binary installed but may have terminal compatibility issues in CI'
          "

      - name: Check test results
        if: always()
        shell: bash
        run: |
          # Check if any tests failed and fail the job if so
          failed=0

          if [[ "${{ steps.test-homebrew.outcome }}" == "failure" ]]; then
            echo "❌ Homebrew installation test failed"
            failed=1
          elif [[ "${{ steps.test-homebrew.outcome }}" == "success" ]]; then
            echo "✅ Homebrew installation test passed"
          fi

          if [[ "${{ steps.test-chocolatey.outcome }}" == "failure" ]]; then
            echo "❌ Chocolatey installation test failed"
            failed=1
          elif [[ "${{ steps.test-chocolatey.outcome }}" == "success" ]]; then
            echo "✅ Chocolatey installation test passed"
          fi

          if [[ "${{ steps.test-docker.outcome }}" == "failure" ]]; then
            echo "❌ Docker container test failed"
            failed=1
          elif [[ "${{ steps.test-docker.outcome }}" == "success" ]]; then
            echo "✅ Docker container test passed"
          fi

          if [[ "${{ steps.test-nix.outcome }}" == "failure" ]]; then
            echo "❌ Nix installation test failed"
            failed=1
          elif [[ "${{ steps.test-nix.outcome }}" == "success" ]]; then
            echo "✅ Nix installation test passed"
          fi

          if [[ "${{ steps.test-apt.outcome }}" == "failure" ]]; then
            echo "❌ APT repository installation test failed"
            failed=1
          elif [[ "${{ steps.test-apt.outcome }}" == "success" ]]; then
            echo "✅ APT repository installation test passed"
          fi

          if [[ "${{ steps.test-rpm.outcome }}" == "failure" ]]; then
            echo "❌ RPM repository installation test failed"
            failed=1
          elif [[ "${{ steps.test-rpm.outcome }}" == "success" ]]; then
            echo "✅ RPM repository installation test passed"
          fi

          if [[ $failed -eq 1 ]]; then
            echo ""
            echo "❌ One or more installation tests failed"
            exit 1
          else
            echo ""
            echo "✅ All applicable installation tests passed"
          fi
