---
name: Build Debian Packages

"on":
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to update (e.g., 1.0.0)"
        required: true
        type: string
  repository_dispatch:
    types: [release-orchestrator]

concurrency:
  group: debian-package
  cancel-in-progress: true

jobs:
  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up architecture
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Download release binary
        run: |
          version="${{ github.event.release.tag_name ||
            github.event.inputs.version || github.event.client_payload.version }}"
          version="${version#v}"

          if [ "${{ matrix.arch }}" = "amd64" ]; then
            asset_name="amp-linux-x64"
          else
            asset_name="amp-linux-arm64"
          fi

          wget "https://github.com/sourcegraph/amp-packages/releases/download/v${version}/${asset_name}"
          chmod +x ${asset_name}

          # Create directory structure for debian packaging
          mkdir -p usr/bin
          cp ${asset_name} usr/bin/amp

      - name: Setup GPG
        run: |
          echo "${{ secrets.DEB_GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "${{ secrets.DEB_GPG_PUBLIC_KEY }}" | gpg --batch --import
        env:
          GPG_TTY: $(tty)

      - name: Build .deb package
        run: |
          version="${{ github.event.release.tag_name ||
            github.event.inputs.version || github.event.client_payload.version }}"
          version="${version#v}"

          # Update changelog version
          sed -i "1s/amp (.*)/amp (${version}-1) unstable; urgency=medium/" debian/changelog

          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y debhelper build-essential

          # Create DEBIAN directory structure
          mkdir -p DEBIAN

          # Calculate installed size (in KB)
          size=$(du -k usr/bin/amp | cut -f1)

          # Create proper control file
          cat > DEBIAN/control << EOF
          Package: amp
          Version: ${version}-1
          Architecture: ${{ matrix.arch }}
          Maintainer: Sourcegraph <support@sourcegraph.com>
          Depends: ripgrep
          Installed-Size: $size
          Section: utils
          Priority: optional
          Homepage: https://github.com/sourcegraph/amp-packages
          Description: AI-powered coding assistant CLI tool
           Amp CLI is an AI-powered coding assistant that helps developers write better code faster.
           It provides intelligent code suggestions, error detection, and automated refactoring capabilities.
           .
           Features:
            - AI-powered code suggestions
            - Error detection and fixing
            - Automated refactoring
            - Cross-platform support
            - Easy command-line interface
          EOF

          # Build package
          dpkg-deb --build . amp_${version}-1_${{ matrix.arch }}.deb

          # Sign the package
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.DEB_GPG_PASSWORD }}" \
            --default-key "${{ secrets.DEB_GPG_KEY_ID }}" \
            --armor --detach-sign amp_${version}-1_${{ matrix.arch }}.deb

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: amp-${{ matrix.arch }}.deb
          path: |
            amp_*_${{ matrix.arch }}.deb
            amp_*_${{ matrix.arch }}.deb.asc

      - name: Attach DEB to GitHub Release
        run: |
          version="${{ github.event.release.tag_name ||
            github.event.inputs.version || github.event.client_payload.version }}"
          if [[ ! "$version" =~ ^v ]]; then
            version="v${version}"
          fi
          gh release upload "$version" amp_*_${{ matrix.arch }}.deb amp_*_${{ matrix.arch }}.deb.asc --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
