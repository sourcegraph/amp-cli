name: Update Package Managers

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  update-winget:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update winget manifests
        run: |
          $version = "${{ github.event.release.tag_name || github.event.inputs.version }}"
          $version = $version -replace '^v', ''
          
          # Update version in manifests
          (Get-Content winget/Sourcegraph.Amp.yaml) -replace 'PackageVersion: .*', "PackageVersion: $version" | Set-Content winget/Sourcegraph.Amp.yaml
          (Get-Content winget/Sourcegraph.Amp.installer.yaml) -replace 'PackageVersion: .*', "PackageVersion: $version" | Set-Content winget/Sourcegraph.Amp.installer.yaml
          (Get-Content winget/Sourcegraph.Amp.locale.en-US.yaml) -replace 'PackageVersion: .*', "PackageVersion: $version" | Set-Content winget/Sourcegraph.Amp.locale.en-US.yaml
          
          # Update download URLs
          (Get-Content winget/Sourcegraph.Amp.installer.yaml) -replace 'v[0-9]+\.[0-9]+\.[0-9]+', "v$version" | Set-Content winget/Sourcegraph.Amp.installer.yaml

      - name: Create PR to winget-pkgs
        run: |
          # This would typically fork winget-pkgs repo and create a PR
          # For now, just output the files that need to be submitted
          echo "Manual step: Submit these manifests to https://github.com/microsoft/winget-pkgs"
          echo "Location: manifests/s/Sourcegraph/Amp/${{ github.event.release.tag_name || github.event.inputs.version }}/"

  update-chocolatey:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Update chocolatey package
        run: |
          $version = "${{ github.event.release.tag_name || github.event.inputs.version }}"
          $version = $version -replace '^v', ''
          
          # Update version in nuspec
          (Get-Content chocolatey/amp.nuspec) -replace '<version>.*</version>', "<version>$version</version>" | Set-Content chocolatey/amp.nuspec
          
          # Update download URL in install script
          (Get-Content chocolatey/tools/chocolateyinstall.ps1) -replace 'v[0-9]+\.[0-9]+\.[0-9]+', "v$version" | Set-Content chocolatey/tools/chocolateyinstall.ps1

      - name: Build chocolatey package
        run: |
          cd chocolatey
          choco pack
          
      - name: Test chocolatey package
        run: |
          cd chocolatey
          choco install amp -s . -f -y
          amp --version
          choco uninstall amp -y

      # Note: Actual publishing would require API key
      # - name: Publish to Chocolatey
      #   run: |
      #     cd chocolatey
      #     choco push amp.${{ github.event.release.tag_name || github.event.inputs.version }}.nupkg -s https://push.chocolatey.org/ -k ${{ secrets.CHOCOLATEY_API_KEY }}

  update-homebrew:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Homebrew formula
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Update version and URLs in formula
          sed -i '' "s/version \".*\"/version \"$version\"/" Formula/amp.rb
          sed -i '' "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$version/g" Formula/amp.rb

      - name: Commit updated formula
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/amp.rb
          git commit -m "Update Homebrew formula to ${{ github.event.release.tag_name || github.event.inputs.version }}" || exit 0
          git push

  update-nix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Update Nix flake
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Update version in flake.nix
          sed -i "s/version = \".*\";/version = \"$version\";/" flake.nix
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$version/g" flake.nix

      - name: Test Nix flake
        run: |
          nix flake check
          nix build .#amp

      - name: Commit updated flake
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add flake.nix
          git commit -m "Update Nix flake to ${{ github.event.release.tag_name || github.event.inputs.version }}" || exit 0
          git push

  update-aur:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH for AUR
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          ssh-keyscan -H aur.archlinux.org >> ~/.ssh/known_hosts
          
          # Create SSH config for AUR
          cat > ~/.ssh/config <<EOF
          Host aur.archlinux.org
            User aur
            IdentityFile ~/.ssh/aur
            StrictHostKeyChecking yes
          EOF

      - name: Calculate release checksums
        id: checksums
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Download release files to calculate checksums
          curl -fsSL -o amp-linux-amd64.tar.gz "https://github.com/sourcegraph/amp-cli/releases/download/v${version}/amp-linux-amd64.tar.gz"
          curl -fsSL -o amp-linux-arm64.tar.gz "https://github.com/sourcegraph/amp-cli/releases/download/v${version}/amp-linux-arm64.tar.gz"
          
          # Calculate SHA256 checksums
          amd64_sha=$(sha256sum amp-linux-amd64.tar.gz | cut -d' ' -f1)
          arm64_sha=$(sha256sum amp-linux-arm64.tar.gz | cut -d' ' -f1)
          
          echo "amd64_sha=$amd64_sha" >> $GITHUB_OUTPUT
          echo "arm64_sha=$arm64_sha" >> $GITHUB_OUTPUT
          
          # Clean up
          rm amp-linux-*.tar.gz

      - name: Clone and update AUR package
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Clone AUR repository
          git clone ssh://aur@aur.archlinux.org/amp-bin.git aur-repo
          cd aur-repo
          
          # Update PKGBUILD
          sed -i "s/pkgver=.*/pkgver=$version/" PKGBUILD
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$version/g" PKGBUILD
          sed -i "s/sha256sums_x86_64=.*/sha256sums_x86_64=('${{ steps.checksums.outputs.amd64_sha }}')/" PKGBUILD
          sed -i "s/sha256sums_aarch64=.*/sha256sums_aarch64=('${{ steps.checksums.outputs.arm64_sha }}')/" PKGBUILD
          
          # Generate new .SRCINFO
          makepkg --printsrcinfo > .SRCINFO
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Commit and push changes
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version $version
          
          - Update pkgver to $version
          - Update download URLs for new release
          - Update SHA256 checksums for x86_64 and aarch64
          
          Automated update from GitHub Actions"
          
          git push origin master

      - name: Update local AUR files
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Copy updated files back to our repository
          cp aur-repo/PKGBUILD aur/amp-bin/PKGBUILD
          cp aur-repo/.SRCINFO aur/amp-bin/.SRCINFO
          
          # Update local repository
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add aur/amp-bin/
          git commit -m "Update AUR package to $version with checksums" || exit 0
          git push

  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up architecture
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Download release binary
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            arch_name="amd64"
          else
            arch_name="arm64"
          fi
          
          wget "https://github.com/sourcegraph/amp-cli/releases/download/v${version}/amp-linux-${arch_name}.tar.gz"
          tar -xzf "amp-linux-${arch_name}.tar.gz"

      - name: Build .deb package
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Update changelog version
          sed -i "s/amp (.*)/amp (${version}-1)/" debian/changelog
          
          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y debhelper build-essential
          
          # Build package
          dpkg-buildpackage -us -uc -b --host-arch=${{ matrix.arch }}

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: amp-${{ matrix.arch }}.deb
          path: ../amp_*.deb

  build-rpm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm build-essential

      - name: Download release binary
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            arch_name="amd64"
          else
            arch_name="arm64"
          fi
          
          wget "https://github.com/sourcegraph/amp-cli/releases/download/v${version}/amp-linux-${arch_name}.tar.gz"

      - name: Build .rpm package
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          version="${version#v}"
          
          # Update spec version
          sed -i "s/Version:.*/Version: ${version}/" rpm/amp.spec
          
          # Set up RPM build environment
          mkdir -p ~/rpmbuild/{SOURCES,SPECS,BUILD,RPMS,SRPMS}
          cp amp-linux-*.tar.gz ~/rpmbuild/SOURCES/
          cp rpm/amp.spec ~/rpmbuild/SPECS/
          
          # Build RPM
          rpmbuild --target ${{ matrix.arch }} -bb ~/rpmbuild/SPECS/amp.spec

      - name: Upload .rpm artifact
        uses: actions/upload-artifact@v4
        with:
          name: amp-${{ matrix.arch }}.rpm
          path: ~/rpmbuild/RPMS/${{ matrix.arch }}/amp-*.rpm

  build-repositories:
    runs-on: ubuntu-latest
    needs: [build-deb, build-rpm]
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GPG
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import --batch
          echo "GPG_KEY_ID=${{ secrets.GPG_KEY_ID }}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install repository tools
        run: |
          sudo apt-get update
          sudo apt-get install -y createrepo-c dpkg-dev

      - name: Prepare package directories
        run: |
          mkdir -p debs rpms
          find artifacts -name "*.deb" -exec cp {} debs/ \;
          find artifacts -name "*.rpm" -exec cp {} rpms/ \;

      - name: Build Debian repository
        run: |
          chmod +x scripts/build-debian-repo.sh
          ./scripts/build-debian-repo.sh debs repository/debian

      - name: Build RPM repository
        run: |
          chmod +x scripts/build-rpm-repo.sh
          ./scripts/build-rpm-repo.sh rpms repository/rpm

      - name: Create release assets
        run: |
          # Create repository archives
          tar -czf debian-repo.tar.gz -C repository debian
          tar -czf rpm-repo.tar.gz -C repository rpm
          
          # Copy GPG key to release location
          mkdir -p release-assets/gpg
          cp repository/gpg/amp-cli.asc release-assets/gpg/ || echo "GPG key not found, will be created manually"

      - name: Upload repositories to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            debian-repo.tar.gz
            rpm-repo.tar.gz
            release-assets/gpg/amp-cli.asc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages (repositories)
        if: github.ref == 'refs/heads/main'
        run: |
          # Copy repository files to a GitHub Pages compatible structure
          mkdir -p gh-pages
          cp -r repository/* gh-pages/
          
          # Create index.html for repository listing
          cat > gh-pages/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Amp CLI Package Repositories</title>
          </head>
          <body>
              <h1>Amp CLI Package Repositories</h1>
              <ul>
                  <li><a href="debian/">Debian/Ubuntu Repository</a></li>
                  <li><a href="rpm/">RHEL/Fedora Repository</a></li>
                  <li><a href="gpg/">GPG Keys</a></li>
              </ul>
          </body>
          </html>
          EOF

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          destination_dir: releases/download
