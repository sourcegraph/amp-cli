---
name: Build Package Repositories

"on":
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update (e.g., 1.0.0)'
        required: true
        type: string
  repository_dispatch:
    types: [release-orchestrator]

concurrency:
  group: package-repositories
  cancel-in-progress: true

jobs:
  build-repositories:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'repository_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          if [ -n "$GPG_PRIVATE_KEY" ]; then
            echo "$GPG_PRIVATE_KEY" | gpg --import --batch
            echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
          else
            echo "GPG_PRIVATE_KEY secret not set, skipping GPG setup"
            echo "GPG_KEY_ID=" >> $GITHUB_ENV
          fi

      - name: Download Debian artifacts
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: debian.yml
          name: amp-amd64.deb
          path: artifacts/

      - name: Download Debian artifacts (arm64)
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: debian.yml
          name: amp-arm64.deb
          path: artifacts/

      - name: Download RPM artifacts
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: rpm.yml
          name: amp-x86_64.rpm
          path: artifacts/

      - name: Download RPM artifacts (aarch64)
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: rpm.yml
          name: amp-aarch64.rpm
          path: artifacts/

      - name: Install repository tools
        run: |
          sudo apt-get update
          sudo apt-get install -y createrepo-c dpkg-dev

      - name: Prepare package directories
        run: |
          mkdir -p debs rpms
          find artifacts -name "*.deb" -exec cp {} debs/ \;
          find artifacts -name "*.rpm" -exec cp {} rpms/ \;

      - name: Build Debian repository
        run: |
          chmod +x scripts/build-debian-repo.sh
          ./scripts/build-debian-repo.sh debs repository/debian

      - name: Build RPM repository
        run: |
          chmod +x scripts/build-rpm-repo.sh
          ./scripts/build-rpm-repo.sh rpms repository/rpm

      - name: Export GPG public key
        run: |
          if [ -n "$GPG_KEY_ID" ]; then
            echo "Exporting GPG public key for repositories..."
            mkdir -p repository/gpg
            gpg --armor --export "$GPG_KEY_ID" > repository/gpg/amp-cli.asc
            echo "GPG public key exported to repository/gpg/amp-cli.asc"
          else
            echo "Warning: GPG_KEY_ID not set, creating placeholder"
            mkdir -p repository/gpg
            echo "# GPG key not available" > repository/gpg/amp-cli.asc
          fi

      - name: Create release assets
        run: |
          # Create repository archives
          tar -czf debian-repo.tar.gz -C repository debian
          tar -czf rpm-repo.tar.gz -C repository rpm

          # Copy GPG key to release location
          mkdir -p release-assets/gpg
          cp repository/gpg/amp-cli.asc release-assets/gpg/ ||
            echo "GPG key not found, will be created manually"

      - name: Upload repositories to release
        run: |
          version="${{ github.event.release.tag_name ||
            github.event.inputs.version || github.event.client_payload.version }}"
          if [[ ! "$version" =~ ^v ]]; then
            version="v${version}"
          fi
          gh release upload "$version" \
            debian-repo.tar.gz \
            rpm-repo.tar.gz \
            release-assets/gpg/amp-cli.asc \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Authenticate to Google using Workload Identity
      - name: gcloud auth
        uses: google-github-actions/auth@v2
        with:
          # https://github.com/sourcegraph/infrastructure/tree/main/managed-services/amp-publishing-pipeline
          # https://console.cloud.google.com/iam-admin/workload-identity-pools/pool/amp-publishing-provider?inv=1&invt=AbyCAQ&project=sourcegraph-dev
          workload_identity_provider: >-
            projects/527047051561/locations/global/workloadIdentityPools/amp-publishing-provider/providers/amp-publishing-provider
          # Service account must match the service account specified in the MSP rollout specification
          # https://github.com/sourcegraph/managed-services/blob/main/services/amp/service.yaml
          service_account: wi-gh-msp-amp-publishing@sourcegraph-dev.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy repositories to GCP bucket
        run: |
          # Create index.html for repository listing
          cat > repository/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Amp CLI Package Repositories</title>
              <meta charset="utf-8">
              <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                ul { list-style-type: none; padding: 0; }
                li { margin: 10px 0; }
                a { color: #007bff; text-decoration: none; }
                a:hover { text-decoration: underline; }
                pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
                code { font-family: 'Courier New', monospace; }
              </style>
          </head>
          <body>
              <h1>Amp CLI Package Repositories</h1>
              <p>Official package repositories for the Amp CLI tool.</p>
              <ul>
                  <li><a href="debian/">ðŸ“¦ Debian/Ubuntu Repository</a></li>
                  <li><a href="rpm/">ðŸ“¦ RHEL/Fedora/CentOS Repository</a></li>
                  <li><a href="gpg/">ðŸ”‘ GPG Keys</a></li>
              </ul>
              <h2>Quick Setup</h2>
              <h3>Debian/Ubuntu</h3>
              <pre><code>curl -fsSL https://packages.ampcode.com/gpg/amp-cli.asc | \
            sudo gpg --dearmor -o /usr/share/keyrings/amp-cli.gpg
          echo "deb [signed-by=/usr/share/keyrings/amp-cli.gpg] \
            https://packages.ampcode.com/debian stable main" | \
            sudo tee /etc/apt/sources.list.d/amp-cli.list
          sudo apt update && sudo apt install amp</code></pre>
              <h3>RHEL/Fedora/CentOS</h3>
              <pre><code>sudo curl -fsSL https://packages.ampcode.com/gpg/amp-cli.asc \
            -o /etc/pki/rpm-gpg/RPM-GPG-KEY-amp-cli
          sudo tee /etc/yum.repos.d/amp-cli.repo <<'REPO_EOF'
          [amp-cli]
          name=Amp CLI Repository
          baseurl=https://packages.ampcode.com/rpm
          enabled=1
          gpgcheck=1
          gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-amp-cli
          REPO_EOF
          sudo yum install amp</code></pre>
          </body>
          </html>
          EOF

          # Sync repository files to GCP bucket
          echo "Uploading repository files to gs://packages.ampcode.com/"
          gsutil -m rsync -r -d repository/ gs://packages.ampcode.com/

          # Set appropriate content types and cache headers
          gsutil -m setmeta -h "Content-Type:text/html" \
            -h "Cache-Control:public, max-age=300" \
            gs://packages.ampcode.com/index.html || true

          gsutil -m setmeta -h "Content-Type:application/pgp-keys" \
            -h "Cache-Control:public, max-age=86400" \
            "gs://packages.ampcode.com/gpg/*.asc" || true

          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" \
            "gs://packages.ampcode.com/debian/**" || true

          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" \
            "gs://packages.ampcode.com/rpm/**" || true

          echo "Repository deployment completed successfully"
